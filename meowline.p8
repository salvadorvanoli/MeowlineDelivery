pico-8 cartridge // http://www.pico-8.com
version 42
__lua__
-- variables

-- Activar modo debugging (se ven las hitboxes)
debugging = false;

player = {
    x = 64,
    y = 80,
    dx = 0,
    dy = 0,
    w = 12,
    h = 16,
    grounded = false,
    der = true,
    anim_frame = 0,
    anim_timer = 0,
    anim_speed = 8,
    walking = false
}

-- enemigos roombas
roombas = {}
roomba_move_speed = 1

-- sprite que se convierte en roomba en el mapa
roomba_spawn_sprite = 32

-- variables de movimiento
gravity = 0.3
jump_power = -5
move_speed = 2

-- Indice del sprite solido (suelo)
platform_sprites = { 64 }     -- Bloques de plataforma (solo solidos desde arriba)
solid_sprites = { 66 }    -- Bloques totalmente solidos (desde todos los lados)
damage_sprites = { 67 } -- Bloques que daれねan al jugador

-->8
-- funciones de colisiones

-- Funcion para verificar si un sprite es una plataforma
function is_platform_sprite(sprite_id)
    for platform in all(platform_sprites) do
        if sprite_id == platform then
            return true
        end
    end
    return false
end

-- Funcion para verificar si un sprite es un bloque solido
function is_solid_sprite(sprite_id)
    for solid in all(solid_sprites) do
        if sprite_id == solid then
            return true
        end
    end
    return false
end

-- Funcion para verificar si un sprite es un bloque que daれねa al jugador
function is_damage_sprite(sprite_id)
    for damage in all(damage_sprites) do
        if sprite_id == damage then
            return true
        end
    end
    return false
end

-- Funcion para detectar bloques solidos
function check_solid_collision(x, y, w, h)
    x = flr(x)
    y = flr(y)
    
    local start_cx = flr(x / 8)
    local end_cx = flr((x + w - 1) / 8)
    local start_cy = flr(y / 8)
    local end_cy = flr((y + h - 1) / 8)

    for cx = start_cx, end_cx do
        for cy = start_cy, end_cy do
            local sprite_id = mget(cx, cy)
            if is_solid_sprite(sprite_id) then
                return true, cx * 8, cy * 8  -- Devolver posicion del bloque
            end
        end
    end

    return false
end

-- Funcion para detectar bloques daれねinos
function check_damage_collision(x, y, w, h)
    x = flr(x)
    y = flr(y)
    
    local start_cx = flr(x / 8)
    local end_cx = flr((x + w - 1) / 8)
    local start_cy = flr(y / 8)
    local end_cy = flr((y + h - 1) / 8)

    for cx = start_cx, end_cx do
        for cy = start_cy, end_cy do
            local sprite_id = mget(cx, cy)
            if is_damage_sprite(sprite_id) then
                return true
            end
        end
    end

    return false
end

-- Funcion para detectar plataformas
function check_platform_collision(x, y, w, h)
    x = flr(x)
    y = flr(y)
    
    local start_cx = flr(x / 8)
    local end_cx = flr((x + w - 1) / 8)
    local start_cy = flr(y / 8)
    local end_cy = flr((y + h - 1) / 8)

    for cx = start_cx, end_cx do
        for cy = start_cy, end_cy do
            local sprite_id = mget(cx, cy)
            if is_platform_sprite(sprite_id) then -- Cambio aquれと
                return true, cy * 8
            end
        end
    end

    return false
end

function check_ground_collision(x, y, w, h)
    -- Verificar plataformas
    local platform_collided, platform_y = check_platform_collision(x, y, w, h)
    if platform_collided then
        return true, platform_y
    end
    
    -- Verificar bloques solidos
    local solid_collided, _, solid_y = check_solid_collision(x, y, w, h)
    if solid_collided then
        return true, solid_y
    end
    
    return false
end

function check_player_on_roomba()
    for roomba in all(roombas) do
        if player.y + player.h >= roomba.y and player.y + player.h <= roomba.y + 4 and -- Permitir un rango de 4 pixeles
           player.x + player.w > roomba.x and player.x < roomba.x + roomba.w and
           player.dy >= 0 then
            return true, roomba
        end
    end
    
    return false
end

function check_player_roomba_side_collision()
    for roomba in all(roombas) do
        if player.x + player.w > roomba.x and player.x < roomba.x + roomba.w and
           player.y + player.h > roomba.y and player.y < roomba.y + roomba.h then

            local on_roomba, _ = check_player_on_roomba()
            if not on_roomba then
                return true
            end
        end
    end

    return false
end

-- Funcion que detecta cualquier sprite donde las roombas se pueden parar
function check_roomba_ground_collision(x, y, w, h)
    x = flr(x)
    y = flr(y)
    
    local start_cx = flr(x / 8)
    local end_cx = flr((x + w - 1) / 8)
    local start_cy = flr(y / 8)
    local end_cy = flr((y + h - 1) / 8)

    for cx = start_cx, end_cx do
        for cy = start_cy, end_cy do
            local sprite_id = mget(cx, cy)
            -- Las roombas pueden pararse en plataformas, bloques solidos Y bloques daれねinos
            if is_platform_sprite(sprite_id) or is_solid_sprite(sprite_id) or is_damage_sprite(sprite_id) then
                return true, cy * 8
            end
        end
    end

    return false
end

function reset_player_position()
    player.x = 64
    player.y = 80
    player.dx = 0
    player.dy = 0
    player.grounded = false
end

-->8
-- funciones para dibujar y update

-- funcion de inicializacion de todos los enemigos
function _init()
    spawn_enemies_from_map()
end

-- funcion para escanear el mapa y crear enemigos (por ahora solo roombas)
function spawn_enemies_from_map()
    roombas = {} -- limpiar array existente
    
    -- escanear todo el mapa
    for mx = 0, 127 do
        for my = 0, 31 do
            if mget(mx, my) == roomba_spawn_sprite then
                -- crear nueva roomba en esta posicion
                local new_roomba = {
                    x = mx * 8,
                    y = my * 8,
                    dx = roomba_move_speed,
                    w = 16,
                    h = 8,
                    grounded = false
                }
                
                add(roombas, new_roomba)
                
                -- limpiar el sprite del mapa
                mset(mx, my, 0)
            end
        end
    end
end

-- Funcion para actualizar las roombas
function update_roombas()
    for roomba in all(roombas) do
        -- Verificar colision horizontal con bloques solidos
        local new_x = roomba.x + roomba.dx
        if check_solid_collision(new_x, roomba.y, roomba.w, roomba.h) then
            roomba.dx = -roomba.dx  -- Cambiar direccion
        else
            roomba.x = new_x  -- Aplicar movimiento
        end

        roomba.grounded = false

        -- Verificar colision con el suelo (USAR LA NUEVA FUNCIれ⧗N PARA ROOMBAS)
        local collided, ground_y = check_roomba_ground_collision(roomba.x, roomba.y + roomba.h, roomba.w, 1)
        if collided then
            roomba.y = ground_y - roomba.h
            roomba.grounded = true
        else
            -- Aplicar gravedad si no esta en el suelo
            roomba.y += gravity
        end

        -- Verificar colision frontal (TAMBIれ웃N USAR LA NUEVA FUNCIれ⧗N)
        local front_x = roomba.x + (roomba.dx > 0 and roomba.w or -1)
        local front_y = roomba.y + roomba.h - 1
        local front_collided = check_roomba_ground_collision(front_x, front_y, 1, 1) or 
                             check_solid_collision(front_x, front_y, 1, 1)

        -- Verificar si hay suelo delante (TAMBIれ웃N USAR LA NUEVA FUNCIれ⧗N)
        local below_front_x = roomba.x + (roomba.dx > 0 and roomba.w or -1)
        local below_front_y = roomba.y + roomba.h + 1
        local below_front_collided = check_roomba_ground_collision(below_front_x, below_front_y, 1, 1)

        -- Cambiar de direccion si hay obstaculo o no hay suelo
        if front_collided or not below_front_collided then
            roomba.dx = -roomba.dx
        end
    end
end

function _draw()
    cls()

    map(0, 0, 0, 0, 128, 128)

    local cam_x = mid(0, player.x - 64, 1024 - 128)
    local cam_y = mid(0, player.y - 64, 256 - 128)
    camera(cam_x, cam_y)

    local sprite_id
    if not player.grounded then
        if player.dy < 0 then
            sprite_id = 8  -- Sprite para cuando esta subiendo
        else
            sprite_id = 10 -- Sprite para cuando esta cayendo
        end
    elseif player.is_walking then
        -- En el suelo y caminando: usar animacion de caminar
        local walk_sprites = {2, 4, 6}
        sprite_id = walk_sprites[player.anim_frame + 1]
    else
        -- En el suelo y parado: sprite idle
        sprite_id = 0
    end

    spr(sprite_id, player.x - 2, player.y, 2, 2, player.der)

    if debugging then
        -- Dibuja el area de colision de todas las roombas
        for roomba in all(roombas) do
            rect(roomba.x, roomba.y, roomba.x + roomba.w, roomba.y + roomba.h, 8)
        end

        -- Dibuja el area de colision del jugador
        rect(player.x, player.y, player.x + player.w, player.y + player.h, 9)
    end

    draw_roombas()
end

-- funcion para dibujar todos los enemigos
function draw_roombas()
    for roomba in all(roombas) do
        spr(32, roomba.x, roomba.y, 2, 1)
    end
end

-- funcion para actualizar
function _update()
    -- Movimiento del jugador
    if btn(0) then -- izquierda
        player.dx = -move_speed
        player.der = false
        player.is_walking = true
    elseif btn(1) then -- derecha
        player.dx = move_speed
        player.der = true
        player.is_walking = true
    else
        player.dx = 0
        player.is_walking = false
        player.anim_frame = 0
    end

    if player.is_walking then
        player.anim_timer += 1
        if player.anim_timer >= player.anim_speed then
            player.anim_timer = 0
            player.anim_frame = (player.anim_frame + 1) % 3
        end
    end

    -- Salto
    if btnp(4) and player.grounded then
        player.dy = jump_power
        player.grounded = false
    end

    -- Aplicar gravedad
    player.dy += gravity

    local new_x = player.x + player.dx
    if check_solid_collision(new_x, player.y, player.w, player.h) then
        player.dx = 0
    else
        player.x = new_x
    end

    -- Verificar si esta sobre roomba
    local on_roomba, current_roomba = check_player_on_roomba()
    if on_roomba then
        player.grounded = true
        player.y = current_roomba.y - player.h
        player.dy = 0
        
        local potential_new_x = player.x + current_roomba.dx
        
        local horizontal_collision = check_solid_collision(potential_new_x, player.y, player.w, player.h)
        
        -- El jugador puede moverse con la roomba sin problemas, no hay bloques solidos delante
        if not horizontal_collision then
            player.x += current_roomba.dx
        
        -- El jugador tiene un bloque solido delante, no puede atravesarlo, pero puede saltar
        else if horizontal_collision then
                player.grounded = true
            end
        end
    else
        -- Codigo existente para cuando no esta sobre roomba...
        local new_y = player.y + player.dy
        if check_solid_collision(player.x, new_y, player.w, player.h) then
            if player.dy > 0 then
                player.grounded = true
                player.dy = 0
                -- Ajustar posicion para estar justo encima del bloque
                local _, _, block_y = check_solid_collision(player.x, new_y, player.w, player.h)
                player.y = block_y - player.h
            else  -- Subiendo (golpeo el techo)
                player.dy = 0
                local _, _, block_y = check_solid_collision(player.x, new_y, player.w, player.h)
                player.y = block_y + 8  -- Posicionar debajo del bloque
            end
        else
            player.y = new_y  -- Aplicar movimiento vertical

            -- Verificar colision con el suelo (plataformas y solidos)
            player.grounded = false
            local collided, ground_y = check_ground_collision(player.x, player.y + player.h, player.w, 1)
            if collided and player.dy >= 0 then
                player.y = ground_y - player.h
                player.dy = 0
                player.grounded = true
            end
        end
    end

    -- Verificar colision con bloques que daれねan al jugador
    if check_damage_collision(player.x, player.y, player.w, player.h) then
        reset_player_position()
    end

    -- Verificar colision lateral con roomba
    if check_player_roomba_side_collision() then
        reset_player_position()
    end

    -- Lれとmites del mapa
    if player.x < 0 then player.x = 0 end
    if player.x + player.w > 1024 then player.x = 1024 - player.w end
    if player.y > 256 then player.y = 256 end

    -- Actualizar todas las roombas
    update_roombas()
end
__gfx__
00000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000006777600000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000070006373760000000000000000000000000000000000000000000000000000000
00000000000000000000000000000070000000000000007000600000000000700006767600000007000000000000000700000000000000000000000000000000
06006000000000000060000000000007006000000000070067776600000000600650555700000060000000000000000700000000000000000000000000000000
67776000000000006777660000000006677766000000060063737000000000600655666650000600000006060000006000000000000000000000000000000000
63737000000000006373700000000060637370000000006067676000000000600066766665500600000677760000006000000000000000000000000000000000
67676000000000006767600000000060676760000000006005557500000000600006666666660600000637370000006000000000000000000000000000000000
05556000000006000555750000000060055575000000006006777755766666000000666666666500000676760055566000000000000000000000000000000000
06776677700070000677775576666600067777500007760007776666666666000000005566666550000055575566660000000000000000000000000000000000
07776666670070000777666666666600077766655677660006766666666666000000000055666050000066666666666000000000000000000000000000000000
06766666775700000676666666666600067666666666660006666665566666600000000000666600000066666666666000000000000000000000000000000000
06666667767000000666666556666660066666655666660005560000000050600000000000000660000066666655656000000000000000000000000000000000
05566077665000000556600000005060005660000000566550600000000506600000000000000060000056665500056000000000000000000000000000000000
05006057650000000500600000005060000560000000006550600000000506000000000000000000000056000000050000000000000000000000000000000000
05006566000000000500600000005060000060000000006000000000000000000000000000000000000056000000000000000000000000000000000000000000
00000007700000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000077770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00666688886667000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666666660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
66666666666667770000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00671166671167000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00001100001100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dddddddd111111116666666606000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
dd1dd1dd155511156611116666600666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d11d11d1111111116161161666600666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111511155516116611666666666000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111116116611611111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111155511156161161611111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111111111116611116611111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
11111111511155516666666611111111000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000808000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
08080000000000000080000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00800000000070000000000000007000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000060000000000808006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
06006000000006000600600080060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
67776008080006006777600000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
63737000800006006373700000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
67676000000060006767600000006000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0ffffffffffffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0fdff88ff88ffdf00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0dff888888ffd0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0dfff8888fffd0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
f0fffff88fffff0f0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00ffffffffffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000200042000000000000000000000000000000000000000000000000000000004242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4342424242000000000000000000000000000000424200000000000000000000004242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000040404040400000000000000000004242000000000000000000000000004242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000041414141410000404040400042420000000000000000000000000000004242000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000041414141410000414141410000000000000000000000000000424242424242424242420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000041414141410000414141410000000000000000004242420000424242424242424242420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2000000041414141410000414141410000000000000000000000000000424242424242424242420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
4040404040404040404040404040404040404040404043434343434343424242424242424242420000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
